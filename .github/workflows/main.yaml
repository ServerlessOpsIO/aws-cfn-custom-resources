name: Main

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup job workspace
        uses: ServerlessOpsIO/gha-setup-workspace@v1

      - name: Setup Python environment
        uses: ServerlessOpsIO/gha-setup-python@v1
        with:
          python_version: 3.12

      - name: Assume AWS Credentials
        uses: ServerlessOpsIO/gha-assume-aws-credentials@v1
        with:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}

      - name: Install AWS SAM
        uses: aws-actions/setup-sam@v2

      # FIXME: We're only validating the top-level template and not the rest.
      - name: Validate SAM template
        run: sam validate --lint -t template.yaml

      - name: Validate StackSets SAM template
        run: sam validate --lint -t stacksets-template.yaml

      - name: Validate SAM app template
        run: sam validate --lint -t applications/aws-cfn-custom-resources/template.yaml

      - name: Unit tests
        id: unit-tests
        shell: bash
        run: pipenv run pytest


      # We have a StackSet with a Lambda function in it.
      - name: Upload SAM artifact (build-account-template)
        id: upload-sam-build-account-template
        shell: bash
        env:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
        run: |
          sam package \
            --template applications/aws-cfn-custom-resources/template.yaml \
            --s3-bucket aws-sar-${{ env.build_aws_account_id }}-us-east-1  \
            --s3-prefix ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}/${{ env.GITHUB_REF_SLUG_URL }} \
            --region us-east-1 \
            --output-template-file applications/aws-cfn-custom-resources/template.yaml

      - name: Synethsize StackSet templates
        run: |
          for _f in $(find . -type f -name 'stackset.yaml'); do
            _dir="$(dirname $_f)/" \
            yq \
              -i \
              '(.. | select(has("localTemplateFile")) | .localTemplateFile) |= load_str(strenv(_dir) + .)' \
              $_f;
          done

      - name: Upload SAM artifact (template)
        id: upload-sam-template
        shell: bash
        env:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
        run: |
          sam package \
            --template template.yaml \
            --s3-bucket aws-sam-cli-sourcebucket-${{ env.build_aws_account_id }}-us-east-1  \
            --s3-prefix ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}/${{ env.GITHUB_REF_SLUG_URL }} \
            --region us-east-1 \
            --output-template-file packaged-template.yaml

      - name: Upload SAM artifact (deletagte-template)
        id: upload-sam-stackset-template
        shell: bash
        env:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
        run: |
          sam package \
            --template stacksets-template.yaml \
            --s3-bucket aws-sam-cli-sourcebucket-${{ env.build_aws_account_id }}-us-east-1  \
            --s3-prefix ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}/${{ env.GITHUB_REF_SLUG_URL }} \
            --region us-east-1 \
            --output-template-file packaged-stacksets-template.yaml

      - name: Store Artifacts
        uses: ServerlessOpsIO/gha-store-artifacts@v1


  deploy_sar:
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup job workspace
        uses: ServerlessOpsIO/gha-setup-workspace@v1
        with:
          checkout_artifact: true

      - name: Setup Python environment
        uses: ServerlessOpsIO/gha-setup-python@v1
        with:
          python_version: 3.12

      - name: Assume AWS Credentials
        uses: ServerlessOpsIO/gha-assume-aws-credentials@v1
        with:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
          gha_build_role_name: ${{ secrets.AWS_CICD_BUILD_ROLE_NAME }}

      - name: Publish SAR Application
        id: publish-sar
        shell: bash
        run: |
          sam publish \
            --template applications/aws-cfn-custom-resources/template.yaml

      - name: Set SAR application policy
        id: set-sar-policy
        shell: bash
        env:
          account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
          org_id: ${{ secrets.AWS_ORG_ID }}
        run: |
          aws serverlessrepo put-application-policy \
            --application-id arn:aws:serverlessrepo:us-east-1:${{ env.account_id }}:applications/cfn-custom-resources \
            --statements PrincipalOrgIDs=${{ env.org_id }},Principals=*,Actions=Deploy,UnshareApplication,CreateCloudFormationTemplate

      - name: Get SAR template URL
        id: get-sar-template-url
        shell: bash
        env:
          account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
        run: |
          template_url=$(aws serverlessrepo create-cloud-formation-template \
            --application-id arn:aws:serverlessrepo:us-east-1:${{ env.account_id }}:applications/cfn-custom-resources \
            --query 'TemplateUrl' \
            --output text)
          echo "Setting SAR application template URL to $template_url"
          echo "template-url=$template_url" >> $GITHUB_OUTPUT

    outputs:
      sar-template-url: ${{ steps.get-sar-template-url.outputs.template-url }}



  deploy_management:
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup job workspace
        uses: ServerlessOpsIO/gha-setup-workspace@v1
        with:
          checkout_artifact: true

      - name: Setup Python environment
        uses: ServerlessOpsIO/gha-setup-python@v1
        with:
          python_version: 3.12

      - name: Assume AWS Credentials
        uses: ServerlessOpsIO/gha-assume-aws-credentials@v1
        with:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
          gha_build_role_name: ${{ secrets.AWS_CICD_BUILD_ROLE_NAME }}
          deploy_aws_account_id: ${{ secrets.AWS_MANAGEMENT_ACCOUNT_ID }}
          gha_deploy_role_name: ${{ secrets.AWS_CICD_DEPLOY_ROLE_NAME }}

      - name: Deploy via AWS SAM
        uses: ServerlessOpsIO/gha-deploy-aws-sam@v1
        with:
          aws_account_id: ${{ secrets.AWS_MANAGEMENT_ACCOUNT_ID }}
          template_file: packaged-template.yaml
          cfn_capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          env_json: ${{ toJson(env) }}
          secrets_json: ${{ toJson(secrets) }}


  deploy_stacksets:
    needs:
      - build
      - deploy_sar
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Setup job workspace
        uses: ServerlessOpsIO/gha-setup-workspace@v1
        with:
          checkout_artifact: true

      - name: Setup Python environment
        uses: ServerlessOpsIO/gha-setup-python@v1
        with:
          python_version: 3.12

      - name: Get SAR template URL
        id: get-sar-template-url
        shell: bash
        run: echo '${{ toJSON(needs.deploy_sar.outputs) }}'

      - name: Assume AWS Credentials
        uses: ServerlessOpsIO/gha-assume-aws-credentials@v1
        with:
          build_aws_account_id: ${{ secrets.AWS_CICD_ACCOUNT_ID }}
          gha_build_role_name: ${{ secrets.AWS_CICD_BUILD_ROLE_NAME }}
          deploy_aws_account_id: ${{ secrets.AWS_STACKSETS_ACCOUNT_ID }}
          gha_deploy_role_name: ${{ secrets.AWS_CICD_DEPLOY_ROLE_NAME }}

      - name: Deploy via AWS SAM
        uses: ServerlessOpsIO/gha-deploy-aws-sam@v1
        with:
          aws_account_id: ${{ secrets.AWS_STACKSETS_ACCOUNT_ID }}
          template_file: packaged-stacksets-template.yaml
          cfn_capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          env_json: ${{ toJson(env) }}
          secrets_json: ${{ toJson(secrets) }}